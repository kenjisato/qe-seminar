

SciPy
###################################################################

SciPy（さいぱぁい）は，FortranにおけるLAPACKやBLASのような工業計算用ライブラリです．この章では，SciPyの主要な部分についての概観を説明します．


SciPy versus NumPy 
===========================================================

SciPyはNumpyライブラリーを内包しています．
そこで，今回は，Scipyのサブパッケージを`import`してみましょう．

SciPy持つ機能の大部分はサブパッケージに入っています．例えば，

 - `scipy.optimize`, `scipy.integrate`, `scipy.stats`, などです

これらを利用したい時は，別々に`import`します．

::

	>>>import scipy.optimize
	>>>from scipy.integrate import quad


先ほど，`SciPy`は`NumPy`を含んでいると述べました．しかし，普通，科学計算を始めるときは，

::

	>>>import numpy as np

のようにして，`NumPy`を`import`しておきます．

そして，

::

	from scipy.integrate import quad
	from scipy.optimize import brentq

のようにして，`SciPy`からその機能を，個別に読み込んでいきます．このようにすることで，どの機能がどのパッケージに入っているかを明示的に記述することができます．


Statistics
===========================================================

Pythonには，`Pandas`のような`R`ライクなライブラリーも存在しますが，`SciPy`にも統計学を扱うサブパッケージが存在します．

`SciPy`のサブパッケージ，`scipy.stat`では

 - 密度関数，累積密度関数，乱数(random sampling)などを作成する
 - 推定
 - 統計検定

などを行うことが出来ます．

Random Variables and Distributions
------------------------------------------------------------------------------------------

この小節では，ベータ分布を使ってみます．まず，`numy.random.beta`でベータ分布に従うランダムな数字をだしてみましょう．

::

	>>>import numpy as np
	>>>np.random.beta(5, 5, size=3) #ベータ分布
	array([ 0.5406392 ,  0.25673906,  0.41268416])


ところで，ベータ分布とは，以下の様な確率密度関数に従うような分布でした．

.. math::

	f(x;a,b)=\frac{x^{(a-1)}(1-x)^{(b-1)}}{\int_0^1 u^{(a-1)}u^{(b-1)}}

この関数の分母にあるのは，ベータ関数ですね．

.. math::

	B(a,b) = \int_0^1 u^{(a-1)}u^{(b-1)}


独立に一様分布 $U(0,1)$ に従う $p+q-1$ 個の確率変数を大きさの順に並べ替えたとき，小さい方から p 番め（大きい方からは q 番目）の確率変数 X の分布がベータ分布 $B(p,q)$ となります。

以上のような，形でベータ分布に従う数字を生成することが出来ますが，特定のパラメータと特定の分布に従うような数字を生成する必要がある場合もあるとおもいます．

例えば，以下のような，図を出したいときです．

.. image:: /_static/img/scipy/beta_density
   :scale: 60%
   :alt: beta_density

黒い実線の曲線はベータ分布の確率密度関数です(理論値)．青い棒グラフのようなものは，先ほどのようにして，ランダムにベータ分布から数字を生成して，プロットしていったものです(観測値)．黒い実線が補助線になっていて，青い観測値がベータ分布にしてがっているような雰囲気を感じることができます．

このような図を生成するのに用いたコードは以下のようなものです．


::

	import numpy as np
	from scipy.stats import beta
	from matplotlib.pyplot import hist, plot, show
	%matplotlib inline
	q = beta(5, 5)      # Beta(a, b), with a = b = 5 scipyじゃないと出ない？？？
	obs = q.rvs(2000)   # 2000 observations
	hist(obs, bins=40, normed=True)
	grid = np.linspace(0.01, 0.99, 100)
	plot(grid, q.pdf(grid), 'k-', linewidth=2)
	show()


このコードの中では，`q =beta(5, 5)`で観測値を作る仮定で，いわゆる，`rv_frozen object` というものが作られています．

この`frozen`を使うことで，分布を固定して，観測値を生成することが出来ます．

この他にも，`q = beta(5,5)`にたいして，`q.cdf()`,`q.pdf()`,`q.ppf()`,`q.mean()` などが使うことが出来ます．


Other Goodies in scipy.stats
-----------------------------------------------------------------------------------------------------

今まで説明した以外にも，`SciPy`には有益な
機能があります．


例えば，`scipy.stat.linregress`では，線形回帰分析を行うことができます．

::

	>>>import numpy as np
	>>>from scipy.stats import linregress

	>>>x = np.random.randn(200)
	>>>y = 2*x + 0.1*np.random.randn(200)
	>>>gradient, intercept, r_value, p_value, std_err = linregress(x, y)
	>>>gradient, intercept
	(2.0034904702816632, -0.0038496543788882898)

と言った具合です．



Roots and Fixed Points
===========================================================

次に紹介するのは，根と不動点の見つけ方です．どちらも，経済学では馴染み深い用語です．

例えば，実数$[a,b]$を定義域にもつ関数fを考えてみます．$x \in [a,b]がこの関数の根であるとは，$f(x)=0$であるということでした．

これを踏まえて，以下のような関数の根を見つける方法を考えてみましょう．

.. math::

	f(x) = sin(4(x-1/4)) + x + x^{20} -1

ただし，xは$x \in [0,1]$ ．

以下では，いくつかの方法を使って，根を見つけてみましょう．

Bisection
------------------------------------------------------------------------------------------------------------------------


Bisection（二分法）とは，以下の様な簡単なアルゴリズムで根を見つける方法です．







